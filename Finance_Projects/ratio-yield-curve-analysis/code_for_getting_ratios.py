# -*- coding: utf-8 -*-
"""Code for getting ratios.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r36crdMzensR5VKtkKOHNOUEBcYQGFna
"""

import yfinance as yf
import pandas as pd

# Define the ticker symbol (example: Aksh Optifibre on NSE)
ticker = yf.Ticker("ARCHIES.NS")

# Function to calculate financial ratios for a specific year
def calculate_ratios_for_year(balance_sheet, income_statement, cash_flow, year, annual_dividends):
    ratios = {}

    # Helper function to get values with error handling
    def get_value(data, row, year):
        if row in data.index and year in data.columns:
            value = data.loc[row, year]
            return value.iloc[0] if not value.empty else None
        return None

    # Extract financial data
    current_assets = get_value(balance_sheet, 'Current Assets', year)
    current_liabilities = get_value(balance_sheet, 'Current Liabilities', year)
    total_assets = get_value(balance_sheet, 'Total Assets', year)
    total_liabilities = get_value(balance_sheet, 'Total Liabilities Net Minority Interest', year)
    total_equity = get_value(balance_sheet, 'Stockholders Equity', year)
    inventory = get_value(balance_sheet, 'Inventory', year)
    receivables = get_value(balance_sheet, 'Accounts Receivable', year)
    ebit = get_value(income_statement, 'EBIT', year)
    interest_expense = get_value(income_statement, 'Interest Expense', year)
    net_income = get_value(income_statement, 'Net Income', year)
    revenue = get_value(income_statement, 'Total Revenue', year)
    operating_cash_flow = get_value(cash_flow, 'Operating Cash Flow', year)
    cash = get_value(balance_sheet, 'Cash And Cash Equivalents', year)
    cost_of_revenue = get_value(income_statement, 'Reconciled Cost Of Revenue', year)

    # Additional data for dividends and market price
    shares_outstanding = ticker.info.get("sharesOutstanding")
    market_price = ticker.info.get("regularMarketPrice")

    # Calculate ratios
    if current_assets is not None and current_liabilities is not None:
        ratios['Current Ratio'] = current_assets / current_liabilities
    if current_assets is not None and current_liabilities is not None and inventory is not None:
        ratios['Acid-Test Ratio'] = (current_assets - inventory) / current_liabilities
    if cash is not None and current_liabilities is not None:
        ratios['Cash Ratio'] = cash / current_liabilities
        ratios['Current Cash Ratio'] = cash / current_liabilities  # Adding Current Cash Ratio
    if total_assets is not None and total_liabilities is not None:
        ratios['Debt Ratio'] = total_liabilities / total_assets
    if total_liabilities is not None and total_equity is not None:
        ratios['Debt to Equity Ratio'] = total_liabilities / total_equity
    if ebit is not None and interest_expense is not None:
        ratios['Interest Coverage Ratio'] = ebit / interest_expense
    if operating_cash_flow is not None and total_liabilities is not None:
        ratios['Debt Service Coverage Ratio'] = operating_cash_flow / total_liabilities
    if revenue is not None and total_assets is not None:
        ratios['Asset Turnover Ratio'] = revenue / total_assets
    if revenue is not None and inventory is not None:
        ratios['Inventory Turnover Ratio'] = revenue / inventory
    if revenue is not None and receivables is not None:
        ratios['Receivables Turnover Ratio'] = revenue / receivables
    if ratios.get('Inventory Turnover Ratio') is not None:
        ratios['Days Sales in Inventory'] = 365 / ratios['Inventory Turnover Ratio']
    if revenue is not None:
        if cost_of_revenue is not None:
            ratios['Gross Margin Ratio'] = (revenue - cost_of_revenue) / revenue
        if ebit is not None:
            ratios['Operating Margin Ratio'] = ebit / revenue
    if net_income is not None and total_assets is not None:
        ratios['Return on Assets (ROA)'] = net_income / total_assets
if net_income is not None and total_equity is not None:
        ratios['Return on Equity (ROE)'] = net_income / total_equity
    if total_equity is not None and shares_outstanding is not None:
        ratios['Book Value per Share'] = total_equity / shares_outstanding
    if annual_dividends is not None and shares_outstanding is not None and market_price is not None:
        dividends_per_share = annual_dividends / shares_outstanding
        ratios['Dividend Yield'] = dividends_per_share / market_price  # Dividend Yield Ratio
    if net_income is not None and shares_outstanding is not None:
        ratios['Earnings per Share (EPS)'] = net_income / shares_outstanding
    if ratios.get('Earnings per Share (EPS)') is not None and market_price is not None:
        ratios['Price-Earnings Ratio (P/E)'] = market_price / ratios['Earnings per Share (EPS)']
    if operating_cash_flow is not None and total_liabilities is not None:
        ratios['Operating Cash Flow Ratio'] = operating_cash_flow / total_liabilities

    return ratios

# Main function to fetch data for each year and calculate ratios
def calculate_ratios(ticker_data):
    # Fetch financial data
    balance_sheet = ticker_data.balance_sheet
    income_statement = ticker_data.financials
    cash_flow = ticker_data.cashflow

    # Define the fiscal years of interest
    fiscal_years = ['2019', '2020', '2021', '2022', '2023', '2024']
    all_ratios = {}

    # Fetch annual dividends per year
    dividends = ticker_data.dividends.resample('Y').sum()

    # Calculate ratios for each year and store them in the dictionary
    for year in fiscal_years:
        if year in balance_sheet.columns and year in income_statement.columns and year in cash_flow.columns:
            # Convert 'year' to a datetime format for matching dividends
            year_dt = pd.to_datetime(f"{year}-12-31")
            annual_dividends = dividends.get(year_dt, None)
            all_ratios[year] = calculate_ratios_for_year(balance_sheet, income_statement, cash_flow, year, annual_dividends)
        else:
            print(f"Data not available for {year}")  # Debugging info for missing data
            all_ratios[year] = "Data not available for this year"

    return all_ratios

# Fetch ticker data and calculate ratios
financial_ratios = calculate_ratios(ticker)

# Display the ratios for each year
for year, ratios in financial_ratios.items():
    print(f"Financial Ratios for {year}:")
    if isinstance(ratios, dict):
        for ratio, value in ratios.items():
            print(f"{ratio}: {value:.2f}" if value is not None else f"{ratio}: Data not available")
    else:
        print(ratios)
    print()

import yfinance as yf
import pandas as pd

# Define the ticker symbol (example: Aksh Optifibre on NSE)
ticker = yf.Ticker("ARCHIES.NS")

# Function to calculate financial ratios for a specific year
def calculate_ratios_for_year(balance_sheet, income_statement, cash_flow, year, annual_dividends):
    ratios = {}

    # Helper function to get values with error handling
    def get_value(data, row, year):
        if row in data.index and year in data.columns:
            value = data.loc[row, year]
            return value.iloc[0] if not value.empty else None
        return None

    # Extract financial data
    current_assets = get_value(balance_sheet, 'Current Assets', year)
    current_liabilities = get_value(balance_sheet, 'Current Liabilities', year)
    total_assets = get_value(balance_sheet, 'Total Assets', year)
    total_liabilities = get_value(balance_sheet, 'Total Liabilities Net Minority Interest', year)
    total_equity = get_value(balance_sheet, 'Stockholders Equity', year)
    inventory = get_value(balance_sheet, 'Inventory', year)
    receivables = get_value(balance_sheet, 'Accounts Receivable', year)
    ebit = get_value(income_statement, 'EBIT', year)
    interest_expense = get_value(income_statement, 'Interest Expense', year)
    net_income = get_value(income_statement, 'Net Income', year)
    revenue = get_value(income_statement, 'Total Revenue', year)
    operating_cash_flow = get_value(cash_flow, 'Operating Cash Flow', year)
    cash = get_value(balance_sheet, 'Cash And Cash Equivalents', year)
    cost_of_revenue = get_value(income_statement, 'Reconciled Cost Of Revenue', year)

    # Additional data for dividends and market price
    shares_outstanding = ticker.info.get("sharesOutstanding")
    market_price = ticker.info.get("regularMarketPrice")

    # Calculate ratios
    if current_assets is not None and current_liabilities is not None:
        ratios['Current Ratio'] = current_assets / current_liabilities
    if current_assets is not None and current_liabilities is not None and inventory is not None:
        ratios['Acid-Test Ratio'] = (current_assets - inventory) / current_liabilities
    if cash is not None and current_liabilities is not None:
        ratios['Cash Ratio'] = cash / current_liabilities
        ratios['Current Cash Ratio'] = cash / current_liabilities  # Adding Current Cash Ratio
    if total_assets is not None and total_liabilities is not None:
        ratios['Debt Ratio'] = total_liabilities / total_assets
    if total_liabilities is not None and total_equity is not None:
        ratios['Debt to Equity Ratio'] = total_liabilities / total_equity
    if ebit is not None and interest_expense is not None:
        ratios['Interest Coverage Ratio'] = ebit / interest_expense
    if operating_cash_flow is not None and total_liabilities is not None:
        ratios['Debt Service Coverage Ratio'] = operating_cash_flow / total_liabilities
    if revenue is not None and total_assets is not None:
        ratios['Asset Turnover Ratio'] = revenue / total_assets
    if revenue is not None and inventory is not None:
        ratios['Inventory Turnover Ratio'] = revenue / inventory
    if revenue is not None and receivables is not None:
        ratios['Receivables Turnover Ratio'] = revenue / receivables
    if ratios.get('Inventory Turnover Ratio') is not None:
        ratios['Days Sales in Inventory'] = 365 / ratios['Inventory Turnover Ratio']
    if revenue is not None:
        if cost_of_revenue is not None:
            ratios['Gross Margin Ratio'] = (revenue - cost_of_revenue) / revenue
        if ebit is not None:
            ratios['Operating Margin Ratio'] = ebit / revenue
    if net_income is not None and total_assets is not None:
        ratios['Return on Assets (ROA)'] = net_income / total_assets
    if net_income is not None and total_equity is not None:
        ratios['Return on Equity (ROE)'] = net_income / total_equity
    if total_equity is not None and shares_outstanding is not None:
        ratios['Book Value per Share'] = total_equity / shares_outstanding
    if annual_dividends is not None and shares_outstanding is not None and market_price is not None:
        dividends_per_share = annual_dividends / shares_outstanding
        ratios['Dividend Yield'] = dividends_per_share / market_price  # Dividend Yield Ratio
    if net_income is not None and shares_outstanding is not None:
        ratios['Earnings per Share (EPS)'] = net_income / shares_outstanding
    if ratios.get('Earnings per Share (EPS)') is not None and market_price is not None:
        ratios['Price-Earnings Ratio (P/E)'] = market_price / ratios['Earnings per Share (EPS)']
    if operating_cash_flow is not None and total_liabilities is not None:
        ratios['Operating Cash Flow Ratio'] = operating_cash_flow / total_liabilities

    return ratios

# Main function to fetch data for each year and calculate ratios
def calculate_ratios(ticker_data):
    # Fetch financial data
    balance_sheet = ticker_data.balance_sheet
    income_statement = ticker_data.financials
    cash_flow = ticker_data.cashflow

    # Define the fiscal years of interest
    fiscal_years = ['2019', '2020', '2021', '2022', '2023', '2024']
    all_ratios = {}

    # Fetch annual dividends per year
    dividends = ticker_data.dividends.resample('Y').sum()

    # Calculate ratios for each year and store them in the dictionary
    for year in fiscal_years:
        if year in balance_sheet.columns and year in income_statement.columns and year in cash_flow.columns:
            # Convert 'year' to a datetime format for matching dividends
            year_dt = pd.to_datetime(f"{year}-12-31")
            annual_dividends = dividends.get(year_dt, None)
            all_ratios[year] = calculate_ratios_for_year(balance_sheet, income_statement, cash_flow, year, annual_dividends)
        else:
            print(f"Data not available for {year}")  # Debugging info for missing data
            all_ratios[year] = "Data not available for this year"

    return all_ratios

# Fetch ticker data and calculate ratios
financial_ratios = calculate_ratios(ticker)

# Display the ratios for each year
for year, ratios in financial_ratios.items():
    print(f"Financial Ratios for {year}:")
    if isinstance(ratios, dict):
        for ratio, value in ratios.items():
            print(f"{ratio}: {value:.2f}" if value is not None else f"{ratio}: Data not available")
    else:
        print(ratios)
    print()

import yfinance as yf
import pandas as pd

# Define the ticker symbol (example: Aksh Optifibre on NSE)
ticker = yf.Ticker("ARCHIES.NS")

# Function to calculate financial ratios for a specific year
def calculate_ratios_for_year(balance_sheet, income_statement, cash_flow, year, annual_dividends):
    ratios = {}

    # Helper function to get values with error handling
    def get_value(data, row, year):
        if row in data.index and year in data.columns:
            value = data.loc[row, year]
            return value.iloc[0] if not value.empty else None
        return None

    # Extract financial data
    current_assets = get_value(balance_sheet, 'Current Assets', year)
    current_liabilities = get_value(balance_sheet, 'Current Liabilities', year)
    total_assets = get_value(balance_sheet, 'Total Assets', year)
    total_liabilities = get_value(balance_sheet, 'Total Liabilities Net Minority Interest', year)
    total_equity = get_value(balance_sheet, 'Stockholders Equity', year)
    inventory = get_value(balance_sheet, 'Inventory', year)
    receivables = get_value(balance_sheet, 'Accounts Receivable', year)
    ebit = get_value(income_statement, 'EBIT', year)
    interest_expense = get_value(income_statement, 'Interest Expense', year)
    net_income = get_value(income_statement, 'Net Income', year)
    revenue = get_value(income_statement, 'Total Revenue', year)
    operating_cash_flow = get_value(cash_flow, 'Operating Cash Flow', year)
    cash = get_value(balance_sheet, 'Cash And Cash Equivalents', year)
    cost_of_revenue = get_value(income_statement, 'Reconciled Cost Of Revenue', year)

    # Additional data for dividends and market price
    shares_outstanding = ticker.info.get("sharesOutstanding")
    market_price = ticker.info.get("regularMarketPrice")

    # Calculate ratios
    if current_assets is not None and current_liabilities is not None:
        ratios['Current Ratio'] = current_assets / current_liabilities
    if current_assets is not None and current_liabilities is not None and inventory is not None:
        ratios['Acid-Test Ratio'] = (current_assets - inventory) / current_liabilities
    if cash is not None and current_liabilities is not None:
        ratios['Cash Ratio'] = cash / current_liabilities
        ratios['Current Cash Ratio'] = cash / current_liabilities  # Adding Current Cash Ratio
    if total_assets is not None and total_liabilities is not None:
        ratios['Debt Ratio'] = total_liabilities / total_assets
    if total_liabilities is not None and total_equity is not None:
        ratios['Debt to Equity Ratio'] = total_liabilities / total_equity
    if ebit is not None and interest_expense is not None:
        ratios['Interest Coverage Ratio'] = ebit / interest_expense
    if operating_cash_flow is not None and total_liabilities is not None:
        ratios['Debt Service Coverage Ratio'] = operating_cash_flow / total_liabilities
    if revenue is not None and total_assets is not None:
        ratios['Asset Turnover Ratio'] = revenue / total_assets
    if revenue is not None and inventory is not None:
        ratios['Inventory Turnover Ratio'] = revenue / inventory
    if revenue is not None and receivables is not None:
        ratios['Receivables Turnover Ratio'] = revenue / receivables
    if ratios.get('Inventory Turnover Ratio') is not None:
        ratios['Days Sales in Inventory'] = 365 / ratios['Inventory Turnover Ratio']
    if revenue is not None:
        if cost_of_revenue is not None:
            ratios['Gross Margin Ratio'] = (revenue - cost_of_revenue) / revenue
        if ebit is not None:
            ratios['Operating Margin Ratio'] = ebit / revenue
    if net_income is not None and total_assets is not None:
        ratios['Return on Assets (ROA)'] = net_income / total_assets
    if net_income is not None and total_equity is not None:
        ratios['Return on Equity (ROE)'] = net_income / total_equity
    if total_equity is not None and shares_outstanding is not None:
        ratios['Book Value per Share'] = total_equity / shares_outstanding
    if annual_dividends is not None and shares_outstanding is not None and market_price is not None:
        dividends_per_share = annual_dividends / shares_outstanding
        ratios['Dividend Yield'] = dividends_per_share / market_price  # Dividend Yield Ratio
    if net_income is not None and shares_outstanding is not None:
        ratios['Earnings per Share (EPS)'] = net_income / shares_outstanding
    if ratios.get('Earnings per Share (EPS)') is not None and market_price is not None:
        ratios['Price-Earnings Ratio (P/E)'] = market_price / ratios['Earnings per Share (EPS)']
    if operating_cash_flow is not None and total_liabilities is not None:
        ratios['Operating Cash Flow Ratio'] = operating_cash_flow / total_liabilities

    return ratios

# Main function to fetch data for each year and calculate ratios
def calculate_ratios(ticker_data):
    # Fetch financial data
    balance_sheet = ticker_data.balance_sheet
    income_statement = ticker_data.financials
    cash_flow = ticker_data.cashflow

    # Define the fiscal years of interest
    fiscal_years = ['2019', '2020', '2021', '2022', '2023', '2024' , '2025']
    all_ratios = {}

    # Fetch annual dividends per year
    dividends = ticker_data.dividends.resample('Y').sum()

    # Calculate ratios for each year and store them in the dictionary
    for year in fiscal_years:
        if year in balance_sheet.columns and year in income_statement.columns and year in cash_flow.columns:
            # Convert 'year' to a datetime format for matching dividends
            year_dt = pd.to_datetime(f"{year}-12-31")
            annual_dividends = dividends.get(year_dt, None)
            all_ratios[year] = calculate_ratios_for_year(balance_sheet, income_statement, cash_flow, year, annual_dividends)
        else:
            print(f"Data not available for {year}")  # Debugging info for missing data
            all_ratios[year] = "Data not available for this year"

    return all_ratios

# Fetch ticker data and calculate ratios
financial_ratios = calculate_ratios(ticker)

# Display the ratios for each year
for year, ratios in financial_ratios.items():
    print(f"Financial Ratios for {year}:")
    if isinstance(ratios, dict):
        for ratio, value in ratios.items():
            print(f"{ratio}: {value:.2f}" if value is not None else f"{ratio}: Data not available")
    else:
        print(ratios)
    print()

import yfinance as yf
import pandas as pd

# Define the ticker symbol (example: Aksh Optifibre on NSE)
ticker = yf.Ticker("ARCHIES.NS")

# Function to calculate financial ratios for a specific year
def calculate_ratios_for_year(balance_sheet, income_statement, cash_flow, year, annual_dividends):
    ratios = {}

    # Helper function to get values with error handling
    def get_value(data, row, year):
        if row in data.index and year in data.columns:
            value = data.loc[row, year]
            return value.iloc[0] if not value.empty else None
        return None

    # Extract financial data
    current_assets = get_value(balance_sheet, 'Current Assets', year)
    current_liabilities = get_value(balance_sheet, 'Current Liabilities', year)
    total_assets = get_value(balance_sheet, 'Total Assets', year)
    total_liabilities = get_value(balance_sheet, 'Total Liabilities Net Minority Interest', year)
    total_equity = get_value(balance_sheet, 'Stockholders Equity', year)
    inventory = get_value(balance_sheet, 'Inventory', year)
    receivables = get_value(balance_sheet, 'Accounts Receivable', year)
    ebit = get_value(income_statement, 'EBIT', year)
    interest_expense = get_value(income_statement, 'Interest Expense', year)
    net_income = get_value(income_statement, 'Net Income', year)
    revenue = get_value(income_statement, 'Total Revenue', year)
    operating_cash_flow = get_value(cash_flow, 'Operating Cash Flow', year)
    cash = get_value(balance_sheet, 'Cash And Cash Equivalents', year)
    cost_of_revenue = get_value(income_statement, 'Reconciled Cost Of Revenue', year)

    # Additional data for dividends and market price
    shares_outstanding = ticker.info.get("sharesOutstanding")
    market_price = ticker.info.get("regularMarketPrice")

    # Calculate ratios
    if current_assets is not None and current_liabilities is not None:
        ratios['Current Ratio'] = current_assets / current_liabilities
    if current_assets is not None and current_liabilities is not None and inventory is not None:
        ratios['Acid-Test Ratio'] = (current_assets - inventory) / current_liabilities
    if cash is not None and current_liabilities is not None:
        ratios['Cash Ratio'] = cash / current_liabilities
        ratios['Current Cash Ratio'] = cash / current_liabilities  # Adding Current Cash Ratio
    if total_assets is not None and total_liabilities is not None:
        ratios['Debt Ratio'] = total_liabilities / total_assets
    if total_liabilities is not None and total_equity is not None:
        ratios['Debt to Equity Ratio'] = total_liabilities / total_equity
    if ebit is not None and interest_expense is not None:
        ratios['Interest Coverage Ratio'] = ebit / interest_expense
    if operating_cash_flow is not None and total_liabilities is not None:
        ratios['Debt Service Coverage Ratio'] = operating_cash_flow / total_liabilities
    if revenue is not None and total_assets is not None:
        ratios['Asset Turnover Ratio'] = revenue / total_assets
    if revenue is not None and inventory is not None:
        ratios['Inventory Turnover Ratio'] = revenue / inventory
    if revenue is not None and receivables is not None:
        ratios['Receivables Turnover Ratio'] = revenue / receivables
    if ratios.get('Inventory Turnover Ratio') is not None:
        ratios['Days Sales in Inventory'] = 365 / ratios['Inventory Turnover Ratio']
    if revenue is not None:
        if cost_of_revenue is not None: